buildscript {
    repositories {
        maven { url 'https://github.com/ben-manes/gradle-versions-plugin/raw/mvnrepo' }
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-5'
        classpath 'net.nisgits.gradle:gradle-executable-jar-plugin:1.7.0' // executable jar plugin
    }
}

def scalaLibraryDependency = 'org.scala-lang:scala-library:2.11.7'
def scalaXmlDependency = 'org.scala-lang.modules:scala-xml_2.11:1.0.3'
def scalaParsingDependency = 'org.scala-lang.modules:scala-parser-combinators_2.11:1.0.3'
def junitDependency = 'junit:junit:4.12'
def scalaTestDependency = 'org.scalatest:scalatest_2.11:2.2.4'
def hamcrestAllDependency = 'org.hamcrest:hamcrest-all:1.3'
def asmDependency = 'org.ow2.asm:asm:6.2'
def graphCoreDependency = 'com.assembla.scala-incubator:graph-core_2.11:1.9.1'
def scallopDependency = 'org.rogach:scallop_2.11:0.9.5'

def isRepositoryOwner = hasProperty('ossrhUsername')
def degraphDescription = 'Degraph is a library for producing jvm package dependency graphs for visual inspection ' +
        'as well as writing tests for checking properties of the dependencies. '


try { // fails when there is no network available
    apply from: 'http://tellurianring.com/projects/gradle-plugins/gradle-release/1.1/apply.groovy'

    createReleaseTag.dependsOn(':degraph:pushToBintray')
    createReleaseTag.dependsOn(':core:pushToBintray')
    createReleaseTag.dependsOn(':check:pushToBintray')

} catch (RuntimeException re) {
    System.out.println('releasing not possible (probably no network)')
}


task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

allprojects {
    apply plugin: 'scala'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'versions'

    if (isRepositoryOwner)
        apply plugin: 'signing'


    group = 'de.schauderhaft.degraph'

    // Following are workarounds to idea goal failing on:
    // Cannot infer Scala class path because..
    // - no repository is declared in root project
    repositories { jcenter() }

    // - no Scala library Jar was found
//    apply from: "$rootDir/gradle/dependencies.gradle"
    dependencies {
        compile scalaLibraryDependency
    }

}

subprojects {

    targetCompatibility = 1.7
    sourceCompatibility = 1.7

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile junitDependency

        testCompile scalaTestDependency
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from scaladoc
    }
    javadocJar.dependsOn scaladoc

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    if (isRepositoryOwner) {
        prepareForMavenCentral(project, description)

    }

}


project('core') {

    description = degraphDescription + 'The core module makes up the main logic of Degraph independent of any UI.'

    archivesBaseName = 'degraph-core'

    createBintrayTasks(project, 'jar')

    dependencies {
        compile scalaLibraryDependency
        compile scalaXmlDependency
        compile scalaParsingDependency

        compile asmDependency
        compile graphCoreDependency
    }
}

project('check') {
    description = degraphDescription + 'The check module allows to write unit tests using scalatest, or junit'

    archivesBaseName = 'degraph-check'

    createBintrayTasks(project, 'jar')

    dependencies {
        compile project(':core')
        compile scalaTestDependency
        compile hamcrestAllDependency
    }
}

project('degraph') {
    apply plugin: 'application'

    description = degraphDescription + 'The degraph module is a command line application for creating dependency graphs.'

    mainClassName = 'de.schauderhaft.degraph.app.Degraph'
    applicationDistribution.from(['license.txt', 'readme.markdown', 'releaseNotes.md']) {
        into '/'
    }
    applicationDistribution.from('src/demo/resource') {
        into '/example/'
    }

    createBintrayTasks(project, 'zip')

    distZip.dependsOn scaladoc


    dependencies {
        compile project(':core')
        compile scallopDependency
    }
}

project('jdk8tests') {
    targetCompatibility = 1.8
    sourceCompatibility = 1.8

    dependencies {
        compile project(':core')
        testCompile junitDependency
        testCompile scalaTestDependency
    }
}

private def createBintrayTasks(project, String artefactType) {

    if (hasProperty('bintrayApiKey')) {
        project.with {
            task pushToBintray(type: Exec) {
                commandLine 'curl',
                        '-T',
                        '--proxy', sbsMavenUser + ':' + sbsMavenPassword + '@https://www-le.dienste.telekom.de:8080',
                        'build/' + artefactDir(artefactType) + project.name + '-' + version + '.' + artefactType,
                        '-uschauder:' + bintrayApiKey,
                        'https://api.bintray.com/content/schauder/schauderhaft-de/Degraph/' + version + '/degraph-' + project.name + '-' + version + '.' + artefactType
            }
            pushToBintray.dependsOn(dependsOn(artefactType))
        }
    }
}

private String dependsOn(String artefactType) {
    if (artefactType == 'zip') {
        return 'distZip'
    } else if (artefactType == 'jar') {
        return 'install'
    } else {
        throw new IllegalArgumentException("don't know how to handle " + artifactType)
    }
}

private String artefactDir(String artefactType) {
    if (artefactType == 'zip') {
        return 'distributions/'
    } else if (artefactType == 'jar') {
        return 'libs/degraph-'
    } else {
        throw new IllegalArgumentException("don't know how to handle " + artifactType)
    }
}

private def prepareForMavenCentral(project, degraphDescription) {
    project.with {
        signing {
            sign configurations.archives
        }
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'Degraph'
                        packaging 'jar'
                        // optionally artifactId can be defined here
                        description degraphDescription
                        url 'http://schauder.github.io/degraph/'

                        scm {
                            connection 'scm:git:https://github.com/schauder/degraph.git'
                            developerConnection 'scm:git:https://github.com/schauder/degraph.git'
                            url 'https://github.com/schauder/degraph.git'
                        }

                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'schauder'
                                name 'Jens Schauder'
                                email 'jens@schauderhaft.de'
                            }
                        }
                    }
                }
            }
        }
    }
}

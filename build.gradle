apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'github-pages'
apply plugin: 'java'

try{ // fails when there is no network available
    apply from: 'http://tellurianring.com/projects/gradle-plugins/gradle-release/1.1/apply.groovy'
} catch (RuntimeException re){
    System.out.println("releasing not possible (probably no network)")
	re.printStackTrace()
}
description= 'Degraph is a library for producing dependency graphs for visual inspection'

targetCompatibility = 1.7
sourceCompatibility = 1.7

task wrapper(type: Wrapper) {
    gradleVersion = '1.5'
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
}

mainClassName = 'de.schauderhaft.degraph.Degraph'
applicationDistribution.from(['license.txt','readme.markdown', 'releaseNotes.md']) {
    into "/"
}
applicationDistribution.from('src/demo/resource'){
    into "/example/"
}
applicationDistribution.from('build/docs'){
    into "/docs"
}

distZip.dependsOn scaladoc


task pushToBintray(type:Exec) {
  commandLine 'curl', '-T', 'build/distributions/degraph-' + version + '.zip', '-uschauder:' + bintrayApikey ,'https://api.bintray.com/content/schauder/schauderhaft-de/Degraph/' + version + '/degraph-'+ version + '.zip'
}

pushToBintray.dependsOn distZip

createReleaseTag.dependsOn pushToBintray

githubPages {
  repoUri = 'https://github.com/schauder/degraph.git'
  credentials {
    username = System.properties['credentials.username']
	password = System.properties['credentials.password']
  }  
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.nisgits.gradle:gradle-executable-jar-plugin:master-REL-6' // executable jar plugin
	}
	
	dependencies { classpath 'org.ajoberstar:gradle-git:0.4.0' } // github-pages plugin
}

repositories {
    mavenCentral()
	mavenCentral name: 'jboss deprecated', artifactUrls: ["https://repository.jboss.org/nexus/content/repositories/deprecated"]
	mavenCentral name: 'sonatype releases', artifactUrls: ["https://oss.sonatype.org/content/repositories/releases"]
	add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'Schauderhaft'
			m2compatible=true
            addArtifactPattern 'http://maven.schauderhaft.de/[organisation]/[module]/[revision]/[module]-[revision].[ext]'
        }
}


//javafx
def javafxLib = "jfxrt.jar"
 
def getJavaFXPath(def javafxLib) {
    def javaHome = System.env["JAVA_HOME"]
    if (javaHome == null) {
        throw new RuntimeException("JAVA_HOME environment variable must be set")
    }
    def javafxrt = "jre" + File.separator + "lib" + File.separator + javafxLib
    return new File(javaHome, javafxrt).absolutePath
}
 

dependencies {
    // Libraries needed to run the scala tools
    scalaTools 'org.scala-lang:scala-compiler:2.9.2'

    // Libraries needed for scala api
    compile 'org.scala-lang:scala-library:2.9.2'
	
	compile 'com.jeantessier:dependencyfinder:1.2.1-beta4'
	compile 'apache-oro:jakarta-oro:2.0.8'
	compile 'com.google.guava:guava:14.0.1'

	compile 'log4j:log4j:1.2.17'
	compile 'org.rogach:scallop_2.9.2:0.8.1'
            
    compile 'com.assembla.scala-incubator:graph-core_2.9.2:1.6.2'        
	
	testCompile 'junit:junit:4.11'
	compile 'org.scalatest:scalatest_2.9.2:1.9.1'
	
	//javafx
	compile files(getJavaFXPath(javafxLib))
}
